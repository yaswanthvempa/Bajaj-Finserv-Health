project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bajaj.challenge</groupId>
    <artifactId>bajaj-health-challenge</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>bajaj-health-challenge</name>

    <properties>
        <java.version>17</java.version>
        <spring.boot.version>2.7.12</spring.boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
            <version>1.3.1</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.3</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
            </plugin>
        </plugins>
    </build>
package com.bajaj.challenge;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;

@Service
public class ApiService {

    private final RestTemplate restTemplate = new RestTemplate();
    private static final String INIT_URL = "https://bfhldevapigw.healthrx.co.in/hiring/generateWebhook";

    public void runChallenge() {
        try {
            JsonNode initResponse = callGenerateWebhook();
            if (initResponse != null) {
                String webhook = initResponse.get("webhook").asText().trim(); // Removed extra space after "webhook"
                String token = initResponse.get("accessToken").asText().trim(); // Removed extra space after "accessToken"
                JsonNode usersNode = initResponse.get("data").get("users");

                List<List<Integer>> result = MutualFollowerSolver.solve(usersNode);

                sendResult(webhook, token, result);
            } else {
                System.err.println("Received null response from the webhook initialization.");
            }
        } catch (Exception e) {
            System.err.println("Failed to run challenge: " + e.getMessage());
        }
    }

    private JsonNode callGenerateWebhook() {
        Map<String, String> body = new HashMap<>();
        body.put("name", "Yaswanth Vempa");
        body.put("regNo", "RA2211003011123"); // Removed extra space after "regNo"
        body.put("email", "yv8512@srmist.edu.in"); // Removed extra space after "email"

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, String>> entity = new HttpEntity<>(body, headers);

        ResponseEntity<JsonNode> response = restTemplate.postForEntity(INIT_URL, entity, JsonNode.class);
        return response.getBody();
    }

    @Retryable(value = Exception.class, maxAttempts = 4, backoff = @Backoff(delay = 2000))
    private void sendResult(String webhook, String token, List<List<Integer>> result) throws Exception {
        Map<String, Object> body = new HashMap<>();
        body.put("regNo", "RA2211003011123"); // Removed extra space after "regNo"
        body.put("outcome", result); // This will be your solution result

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", token);
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);
        ResponseEntity<String> response = restTemplate.exchange(webhook, HttpMethod.POST, request, String.class);

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Webhook POST failed: " + response.getStatusCode());
        }

        System.out.println("Result posted successfully: " + response.getBody());
    }
}

</project>
package com.bajaj.challenge;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.retry.annotation.EnableRetry;

@SpringBootApplication
@EnableRetry
public class MainApplication {
    public static void main(String[] args) {
        SpringApplication.run(MainApplication.class, args);
    }
}
